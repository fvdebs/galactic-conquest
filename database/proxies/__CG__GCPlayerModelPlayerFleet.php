<?php

namespace Inferno\DoctrineProxies\__CG__\GC\Player\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PlayerFleet extends \GC\Player\Model\PlayerFleet implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'playerFleetId', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isOrbit', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isOffensive', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isDefensive', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isStationary', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isMovable', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'missionType', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'missionTypeOriginal', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'ticksLeftUntilMissionCompleted', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'ticksLeftUntilMissionReach', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'player', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'targetPlayer', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'playerFleetUnits'];
        }

        return ['__isInitialized__', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'playerFleetId', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isOrbit', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isOffensive', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isDefensive', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isStationary', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'isMovable', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'missionType', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'missionTypeOriginal', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'ticksLeftUntilMissionCompleted', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'ticksLeftUntilMissionReach', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'player', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'targetPlayer', '' . "\0" . 'GC\\Player\\Model\\PlayerFleet' . "\0" . 'playerFleetUnits'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PlayerFleet $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getPlayerFleetId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getPlayerFleetId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayerFleetId', []);

        return parent::getPlayerFleetId();
    }

    /**
     * {@inheritDoc}
     */
    public function isOrbit(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOrbit', []);

        return parent::isOrbit();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsOrbit(bool $isOrbit): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsOrbit', [$isOrbit]);

        parent::setIsOrbit($isOrbit);
    }

    /**
     * {@inheritDoc}
     */
    public function isStationary(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStationary', []);

        return parent::isStationary();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsStationary(bool $isStationary): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsStationary', [$isStationary]);

        parent::setIsStationary($isStationary);
    }

    /**
     * {@inheritDoc}
     */
    public function isOffensive(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOffensive', []);

        return parent::isOffensive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsOffensive(bool $isOffensive): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsOffensive', [$isOffensive]);

        parent::setIsOffensive($isOffensive);
    }

    /**
     * {@inheritDoc}
     */
    public function isDefensive(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDefensive', []);

        return parent::isDefensive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDefensive(bool $isDefensive): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDefensive', [$isDefensive]);

        parent::setIsDefensive($isDefensive);
    }

    /**
     * {@inheritDoc}
     */
    public function isMovable(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMovable', []);

        return parent::isMovable();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsMovable(bool $isMovable): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsMovable', [$isMovable]);

        parent::setIsMovable($isMovable);
    }

    /**
     * {@inheritDoc}
     */
    public function getMissionType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMissionType', []);

        return parent::getMissionType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMissionType(?string $missionType): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMissionType', [$missionType]);

        parent::setMissionType($missionType);
    }

    /**
     * {@inheritDoc}
     */
    public function getMissionTypeOriginal(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMissionTypeOriginal', []);

        return parent::getMissionTypeOriginal();
    }

    /**
     * {@inheritDoc}
     */
    public function setMissionTypeOriginal(string $missionTypeOriginal): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMissionTypeOriginal', [$missionTypeOriginal]);

        parent::setMissionTypeOriginal($missionTypeOriginal);
    }

    /**
     * {@inheritDoc}
     */
    public function getTicksLeftUntilMissionCompleted(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTicksLeftUntilMissionCompleted', []);

        return parent::getTicksLeftUntilMissionCompleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setTicksLeftUntilMissionCompleted(?int $ticksLeftUntilMissionCompleted): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTicksLeftUntilMissionCompleted', [$ticksLeftUntilMissionCompleted]);

        parent::setTicksLeftUntilMissionCompleted($ticksLeftUntilMissionCompleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getTicksLeftUntilMissionReach(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTicksLeftUntilMissionReach', []);

        return parent::getTicksLeftUntilMissionReach();
    }

    /**
     * {@inheritDoc}
     */
    public function setTicksLeftUntilMissionReach(?int $ticksLeftUntilMissionReach): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTicksLeftUntilMissionReach', [$ticksLeftUntilMissionReach]);

        parent::setTicksLeftUntilMissionReach($ticksLeftUntilMissionReach);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayer(): \GC\Player\Model\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayer', []);

        return parent::getPlayer();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayer(\GC\Player\Model\Player $player): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayer', [$player]);

        parent::setPlayer($player);
    }

    /**
     * {@inheritDoc}
     */
    public function getTargetPlayer(): ?\GC\Player\Model\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTargetPlayer', []);

        return parent::getTargetPlayer();
    }

    /**
     * {@inheritDoc}
     */
    public function setTargetPlayer(?\GC\Player\Model\Player $targetPlayer): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTargetPlayer', [$targetPlayer]);

        parent::setTargetPlayer($targetPlayer);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayerFleetUnits(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayerFleetUnits', []);

        return parent::getPlayerFleetUnits();
    }

    /**
     * {@inheritDoc}
     */
    public function increaseUnitQuantity(\GC\Unit\Model\Unit $unit, int $quantity): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'increaseUnitQuantity', [$unit, $quantity]);

        parent::increaseUnitQuantity($unit, $quantity);
    }

    /**
     * {@inheritDoc}
     */
    public function decreaseUnitQuantity(\GC\Unit\Model\Unit $unit, int $quantity): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'decreaseUnitQuantity', [$unit, $quantity]);

        parent::decreaseUnitQuantity($unit, $quantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayerFleetUnitByUnitId(int $unitId): ?\GC\Player\Model\PlayerFleetUnit
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayerFleetUnitByUnitId', [$unitId]);

        return parent::getPlayerFleetUnitByUnitId($unitId);
    }

    /**
     * {@inheritDoc}
     */
    public function moveUnitTo(\GC\Player\Model\PlayerFleet $playerFleet, int $unitId, int $quantity): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'moveUnitTo', [$playerFleet, $unitId, $quantity]);

        parent::moveUnitTo($playerFleet, $unitId, $quantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitQuantity(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitQuantity', []);

        return parent::getUnitQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitQuantityOf(\GC\Unit\Model\Unit $unit): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitQuantityOf', [$unit]);

        return parent::getUnitQuantityOf($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function calculateUnitPoints(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calculateUnitPoints', []);

        return parent::calculateUnitPoints();
    }

    /**
     * {@inheritDoc}
     */
    public function hasEnoughCarrierSpaceToStart(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasEnoughCarrierSpaceToStart', []);

        return parent::hasEnoughCarrierSpaceToStart();
    }

    /**
     * {@inheritDoc}
     */
    public function attack(\GC\Player\Model\Player $targetPlayer, int $missionTicks): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attack', [$targetPlayer, $missionTicks]);

        parent::attack($targetPlayer, $missionTicks);
    }

    /**
     * {@inheritDoc}
     */
    public function defend(\GC\Player\Model\Player $targetPlayer, int $missionTicks): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'defend', [$targetPlayer, $missionTicks]);

        parent::defend($targetPlayer, $missionTicks);
    }

    /**
     * {@inheritDoc}
     */
    public function recall(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'recall', []);

        parent::recall();
    }

    /**
     * {@inheritDoc}
     */
    public function decreaseTicksLeft(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'decreaseTicksLeft', []);

        parent::decreaseTicksLeft();
    }

    /**
     * {@inheritDoc}
     */
    public function clearOrRecall(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearOrRecall', []);

        parent::clearOrRecall();
    }

    /**
     * {@inheritDoc}
     */
    public function isIdling(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isIdling', []);

        return parent::isIdling();
    }

    /**
     * {@inheritDoc}
     */
    public function isBusy(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBusy', []);

        return parent::isBusy();
    }

    /**
     * {@inheritDoc}
     */
    public function isRecalling(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRecalling', []);

        return parent::isRecalling();
    }

    /**
     * {@inheritDoc}
     */
    public function isTarget(\GC\Player\Model\Player $player): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTarget', [$player]);

        return parent::isTarget($player);
    }

    /**
     * {@inheritDoc}
     */
    public function hasTarget(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasTarget', []);

        return parent::hasTarget();
    }

    /**
     * {@inheritDoc}
     */
    public function isAttacking(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttacking', []);

        return parent::isAttacking();
    }

    /**
     * {@inheritDoc}
     */
    public function isAttackingOriginal(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttackingOriginal', []);

        return parent::isAttackingOriginal();
    }

    /**
     * {@inheritDoc}
     */
    public function isDefending(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDefending', []);

        return parent::isDefending();
    }

    /**
     * {@inheritDoc}
     */
    public function isDefendingOriginal(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDefendingOriginal', []);

        return parent::isDefendingOriginal();
    }

}
